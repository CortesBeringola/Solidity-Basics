{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 pragma solidity ^0.4.24;\
\
contract MemoryVsStorage \{\
    //State variables by default: Storage (They keep their value)\
    //Function variable by default: Memory (Their value gets deleted after running the function)\
    \
    uint[20] public array; //Storage by default\
    \
    function startchange() public\{\
        firstchange(array);\
        secondchange(array);\
    \}\
    function firstchange(uint[20] storage x) internal\{\
        //I have changed argument type so that it becomes storage\
        x[0] = 4;\
    \}\
    function secondchange(uint[20] x) internal pure\{\
        //By default agument here is: memory\
        x[0] = 3;\
    \}\
\}\
\
//The result here would be 4. This is because in secondchange() the \
//function works with a copy, and after it finishes it destroys the \
//value inside. Contrary, firstchange() works with the actual value \
//or reference, so even though the function finishes, the changes in \
//the storage variable still remains }