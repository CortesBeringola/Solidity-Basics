{\rtf1\ansi\ansicpg1252\cocoartf1671
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 pragma solidity ^0.4.24;\
\
contract Bank\{\
    //Define mapping: Called Accounts and we make it Public\
    mapping(address => uint) public accounts1;\
    \
    //Easy function to insert money\
    function deposit(uint money) public \{\
        accounts1[msg.sender] += money;\
    \}\
    //Easy function to withdraw money\
    function withdraw(uint money) public \{\
        accounts1[msg.sender] -= money;\
    \}\
\}\
\
contract SimpleToken\{\
    address owner;\
    mapping (address => uint256) public accounts2;\
    \
    //In the constructor we add the initial amount of tokens\
    //for the owner accounts2\
  constructor(uint256 initialSupply) public \{\
    owner = msg.sender;\
  	accounts2[owner] = initialSupply;\
  \}\
    \
    //Function to transfer money\
    function transfer(address to, uint256 value) public \{\
        //require balance of the owner\
        require(accounts2[msg.sender] >= value);\
        //Overflow unchecked\
        require(accounts2[to] + value >= accounts2[to]);\
        accounts2[msg.sender] -= value;\
        accounts2[to] += value;\
        \
    \}\
\}}